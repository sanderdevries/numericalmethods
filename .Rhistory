cosine(3.14, 0.000001, 1000)
source('~/CosineByMyself.R')
cosine(3.14, 0.0001, 1)
cosine(2, 0.0001, 1)
source('~/CosineByMyself.R')
cosine(2, 0.0001, 2)
cosine(2, 0.0001, 3)
cosine(2, 0.0001, 4)
source('~/CosineByMyself.R')
cosine(2, 0.0001, 3)
source('~/CosineByMyself.R')
cosine(2, 0.0001, 3)
cosine(3.14, 0.00001, 10)
source('~/Documents/workspace R/Sine.R')
source('~/Documents/workspace R/MedievalData.R')
source('~/Documents/workspace R/RWeek6Exercise.R')
source('~/Documents/workspace R/RWeek6Exercise.R')
mtcars
islands
elsbeth
countries
states
help("states)
help(states)
state
state.abb
state()
state.name
iris
}
source('~/Documents/OneDrive/workspace R/Sine.R')
sine(10, 0.001, 1000)
source('~/Documents/OneDrive/Documenten/E&OR/Numerical Methods/problem 3 assignment.R')
ggplot(df) +
geom_histogram(aes(x=df$average, stat(density)), binwidth = 5) + #plot the data
geom_line(data = dd, aes(x=x.grid, y=estimated.density), color = "red")+ #plot the density function
ylim(0,0.1)
m <- optim(p, loglik, hessian = TRUE,control = list(fnscale=-1), z = df$average) #optimization
m#we know that the mean of the gamma distribution is equal to a*b. By comparing the mean of the fitted gammadistribution
setwd("~/Documents/OneDrive/Documenten/E&OR/Numerical Methods")
libary(tidyverse)
source('~/Documents/OneDrive/Documenten/E&OR/Numerical Methods/week 2 exercises.R')
a <- sqrt(2)
a**2==2
near(a**2, 2)
library(tidyverse)
a <- sqrt(2)
near(a**2, 2)
?!
while (a!= a.plus.eps){
eps <- eps/2
a.plus.eps <- a+eps
}
a.plus.eps <- a+eps
while (a!= a.plus.eps){
eps <- eps/2
a.plus.eps <- a+eps
}
a <- 1
eps <- 1
a.plus.eps <- a+eps
while (a!= a.plus.eps){
eps <- eps/2
a.plus.eps <- a+eps
}
a.plus.eps
eps
fixpt_own.r <- function(x0, tol, maxit){
xold <- x0
xnew <- -1 - x0 * log(xold)
i <- 1
while(abs(xnew - xold) > tol & i < maxit){
xold <- xnew
xnew <- -1 - xold * log(xold)
i <- i+1
paste(xold)
}
}
fixpt_own.r(1,0.0001, 1000)
fixpt_own.r(2,0.0001, 1000)
while(abs(xnew - xold) > tol && i < maxit){
xold <- xnew
xnew <- -1 - xold * log(xold)
i <- i+1
paste(xold)
}
g <- function(x){
g <- 4*((1 + x^(-1) - log(x))/(1+x)^2)+x
return(g)
}
g(4)
3,97
g(4.97)
g(3.97)
cat("At iteration 1 the value of x is", xnew)
fixpt_own.r <- function(x0, tol, maxit){
xold <- x0
xnew <- g(xold)
i <- 1
cat("At iteration 1 the value of x is", xnew)
}
fixpt_own.r(4,0.001,100)
fixpt_own.r <- function(x0, tol, maxit){
xold <- x0
xnew <- g(xold)
i <- 1
cat("At iteration 1 the value of x is", xnew)
while(abs(xnew - xold) > tol && i < maxit){
xold <- xnew
xnew <- g(xold)
i <- i+1
cat("At iteration", i, "the value of x is", xnew)
}
if(abs(xnew - xold) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(xnew)
}
}
g <- function(x){
g <- 4*((1 + x^(-1) - log(x))/(1+x)^2)+x
return(g)
}
fixpt_own.r(3, 1e-6, 150)
fixpt_own.r <- function(x0, tol, maxit){
xold <- x0
xnew <- g(xold)
i <- 1
cat("At iteration 1 the value of x is", xnew, "\n")
while(abs(xnew - xold) > tol && i < maxit){
xold <- xnew
xnew <- g(xold)
i <- i+1
cat("At iteration", i, "the value of x is", xnew, "\n")
}
if(abs(xnew - xold) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(xnew)
}
}
g <- function(x){
g <- 4*((1 + x^(-1) - log(x))/(1+x)^2)+x
return(g)
}
fixpt_own.r(3, 1e-6, 150)
g <- function(x){
g <- -1 - x * log(x)
return(g)
}
fixpt_own.r <- function(x0, tol, maxit){
xold <- x0
xnew <- g(xold)
i <- 1
cat("At iteration 1 the value of x is", xnew, "\n")
while(abs(xnew - xold) > tol && i < maxit){
xold <- xnew
xnew <- g(xold)
i <- i+1
cat("At iteration", i, "the value of x is", xnew, "\n")
}
if(abs(xnew - xold) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(xnew)
}
}
g <- function(x){
g <- -1 - x * log(x)
return(g)
}
fixpt_own.r(3, 1e-6, 150)
g <- function(x){
g <- 2*((1 + x^(-1) - log(x))/(1+x)^2)+x
return(g)
}
fixpt_own.r(3, 1e-6, 150)
g <- 1*((1 + x^(-1) - log(x))/(1+x)^2)+x
return(g)
g <- function(x){
g <- 1*((1 + x^(-1) - log(x))/(1+x)^2)+x
return(g)
}
fixpt_own.r(3, 1e-6, 400)
g <- function(x){
g <- (1 + x^(-1) - log(x))/(1+x)^2
return(g)
}
g(1)
g(5)
bisection <- function(x1, x2, tol, maxit){
if(g(x1)*g(x2) > 0){
cat("The initial interval does not contain the root")
return(NULL)
}
i <- 1
while(g(x1)*g(x2) <0 && abs(x1 - x2) > tol && i < maxit){
xnew <- 0.5*(x1 + x2)
ifelse(g(x1)*g(xnew)<0,x2 == xnew, x1 ==xnew)
i <- i + 1
cat("At iteration", i, "your interval is", x1, x2, "\n")
}
}
bisection(0.5,5, 0.001, 150)
ifelse(g(x1)*g(xnew)<0,x2 <- xnew, x1 <- xnew)
ifelse(g(x1)*g(xnew)<0,x2 == xnew, x1 == xnew)
cat("At iteration", i, "your interval is", x1, x2, "\n")
bisection <- function(x1, x2, tol, maxit){
if(g(x1)*g(x2) > 0){
cat("The initial interval does not contain the root")
return(NULL)
}
i <- 1
while(g(x1)*g(x2) <0 && abs(x1 - x2) > tol && i < maxit){
xnew <- 0.5*(x1 + x2)
ifelse(g(x1)*g(xnew)<0,x2 == xnew, x1 == xnew)
i <- i + 1
cat("At iteration", i, "your interval is", x1, x2, "\n")
}
}
bisection(0.5,5, 0.001, 150)
x1 <- 5
x2 <- 2
x3 <- 7
ifelse(x1 + x2 < 9, x2 == x3, x1 == x3)
?ifelse
bisection <- function(x1, x2, tol, maxit){
if(g(x1)*g(x2) > 0){
cat("The initial interval does not contain the root")
return(NULL)
}
i <- 1
while(g(x1)*g(x2) <0 && abs(x1 - x2) > tol && i < maxit){
xnew <- 0.5*(x1 + x2)
if(g(x1)*g(xnew)<0){
x2 <- xnew
} else {
x1 <- xnew
}
i <- i + 1
cat("At iteration", i, "your interval is", x1, x2, "\n")
}
}
bisection(0.5,5, 0.001, 150)
bisection(0.5,6, 1e-6, 150)
secant <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1)>tol && i < maxit){
x1 <- x2
x2 <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
cat("The interval contaings", x1, "and", x2, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
secant(0.5,6,1e-6,100)
secant <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1)>tol && i < maxit){
x1 <- x2
x2 <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
i <- i+1
cat("The interval contaings", x1, "and", x2, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
secant(0.5,6,1e-6,100)
secant <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1)>tol && i < maxit){
x1 <- x2
x2 <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
i <- i+1
cat("The interval contaings", x1, "and", x2, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
secant(0.5,6,1e-6,150)
g(0.5)
while(abs(x2 - x1) > tol ){
x1 <- x2
x2 <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
i <- i+1
cat("The interval contaings", x1, "and", x2, "\n")
}
secant <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1) > tol ){
x1 <- x2
x2 <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
i <- i+1
cat("The interval contaings", x1, "and", x2, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
secant(0.5,6,1e-6,150)
secant(0.5,6,0.0001,150)
x1 <- 0.5
x2 <- 6
x2 <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
x2
secant <- function(x1, x2, tol, maxit){
i <- 1
while((abs(x2 - x1) > tol) && (i < maxit)){
xnew <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
x1 <- x2
x2 <- xnew
i <- i+1
cat("The interval contains", x1, "and", x2, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
secant(0.5,6,0.0001,150)
g <- function(x){
g <- (1 + x^(-1) - log(x))
return(g)
}
fixpt_own.r(3, 1e-6, 400)
secant <- function(x1, x2, tol, maxit){
i <- 1
while((abs(x2 - x1) > tol) && (i < maxit)){
xnew <- x2 - g(x2) * (x2 - x1)/(g(x2) - g(x1))
x1 <- x2
x2 <- xnew
i <- i+1
cat("The interval contains", x1, "and", x2, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
secant(0.5,6,0.0001,150)
source('~/Documents/OneDrive/Documenten/E&OR/Numerical Methods/week 2 exercises.R')
source('~/Documents/OneDrive/Documenten/E&OR/Numerical Methods/week 2 exercises.R')
square
?sqrt
gf <- function(x){
g <- (1 + x^(-1) - log(x))
return(g) #why does this not work if I use the whole derivative for the bisection/secant method?
}
g <- function(S,K,r,sigma,t){
d1 <- (ln(S/K) + (r + 0.5* sigma^2)*t)/(sigma*sqrt(t))
d2 <- d1 - sigma*sqrt(t)
C <- s*pnorm(d1) - pnorm(d2) * K * exp(-r*t)
return(C)
}
f.sigma <- function(sigma){
g(S =100, K=105, t=20, r=0.01/365, sigma) - 1.70
}
f.sigma(0.2)
g <- function(S,K,r,sigma,t){
d1 <- (log(S/K) + (r + 0.5* sigma^2)*t)/(sigma*sqrt(t))
d2 <- d1 - sigma*sqrt(t)
C <- s*pnorm(d1) - pnorm(d2) * K * exp(-r*t)
return(C)
}
f.sigma <- function(sigma){
g(S =100, K=105, t=20, r=0.01/365, sigma) - 1.70
}
g <- function(S,K,r,sigma,t){
d1 <- (log(S/K) + (r + 0.5* sigma^2)*t)/(sigma*sqrt(t))
d2 <- d1 - sigma*sqrt(t)
C <- s*pnorm(d1) - pnorm(d2) * K * exp(-r*t)
return(C)
}
f.sigma <- function(sigma){
g(S =100, K=105, t=20, r=0.01/365, sigma) - 1.70
}
f.sigma(0.2)
g <- function(S,K,r,sigma,t){
d1 <- (log(S/K) + (r + 0.5* sigma^2)*t)/(sigma*sqrt(t))
d2 <- d1 - sigma*sqrt(t)
C <- S*pnorm(d1) - pnorm(d2) * K * exp(-r*t)
return(C)
}
f.sigma <- function(sigma){
g(S =100, K=105, t=20, r=0.01/365, sigma) - 1.70
}
f.sigma(0.2)
s <- function(x1, x2, tol, maxit){
i <- i+1
while(abs(x2 - x1) > tol && i < maxit){
xnew <- x2 - f.sigma(x2) * (x2 - x1)/(f.sigma(x2) - f.sigma(x1))
x2 <- xnew
x1 <- x2
cat("At iteration", i, "your value is", new, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
s(0.001,0.5, 1e-6,100)
s <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1) > tol && i < maxit){
xnew <- x2 - f.sigma(x2) * (x2 - x1)/(f.sigma(x2) - f.sigma(x1))
x2 <- xnew
x1 <- x2
i <- i+1
cat("At iteration", i, "your value is", new, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
s(0.001,0.5, 1e-6,100)
s <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1) > tol && i < maxit){
xnew <- x2 - f.sigma(x2) * (x2 - x1)/(f.sigma(x2) - f.sigma(x1))
x2 <- xnew
x1 <- x2
i <- i+1
cat("At iteration", i, "your value is", xnew, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
s(0.001,0.5, 1e-6,100)
s(0.001,0.5, 0.0001,100)
s <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1) > tol && i < maxit){
xnew <- x2 - f.sigma(x2) * (x2 - x1)/(f.sigma(x2) - f.sigma(x1))
x2 <- xnew
x1 <- x2
i <- i+1
cat("At iteration", i, "your value is", xnew, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
s(0.001,0.5, 1e-6,100)
source('~/Documents/OneDrive/Documenten/E&OR/Numerical Methods/week 2 exercises.R')
f.sigma <- function(sigma){
g(S =100, K=105, t=20, r=0.01/365, sigma) - 1.70
}
s <- function(x1, x2, tol, maxit){
i <- 1
while(abs(x2 - x1) > tol && i < maxit){
xnew <- x2 - f.sigma(x2) * (x2 - x1)/(f.sigma(x2) - f.sigma(x1))
x2 <- xnew
x1 <- x2
i <- i+1
cat("At iteration", i, "your value is", xnew, "\n")
}
if(abs(x2 - x1) > tol){
cat("Algorithm failed to converge")
return(NULL)
} else{
cat("Algorithm converged")
return(x2)
}
}
s(0.001,0.5, 1e-6,100)
